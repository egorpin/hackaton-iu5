import React, { useState } from 'react';

export default function ObservationForm({ onNewCometCalculated }) {
  const [observations, setObservations] = useState([]);
  const [cometName, setCometName] = useState('');
  const [currentObs, setCurrentObs] = useState({
    date: '', time: '',
    raHours: '', raMinutes: '', raSeconds: '',
    decDegrees: '', decMinutes: '', decSeconds: '', decSign: '+',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
  const handleAddObservation = () => {
    if (!currentObs.date || !currentObs.time || !currentObs.raHours || !currentObs.decDegrees) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Ö–æ—Ç—è –±—ã —á–∞—Å—ã (RA) –∏ –≥—Ä–∞–¥—É—Å—ã (Dec).');
      return;
    }

    const newObservation = {
      id: Date.now(),
      datetime: `${currentObs.date}T${currentObs.time}:00Z`,
      timestamp: new Date(`${currentObs.date}T${currentObs.time}`).getTime(),
      raHours: currentObs.raHours || '0', raMinutes: currentObs.raMinutes || '0', raSeconds: currentObs.raSeconds || '0',
      decDegrees: currentObs.decDegrees || '0', decMinutes: currentObs.decMinutes || '0', decSeconds: currentObs.decSeconds || '0',
      decSign: currentObs.decSign,
    };
    setObservations(prev => [...prev, newObservation]);

    // –°–±—Ä–æ—Å –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    setCurrentObs({
      date: '', time: '', raHours: '', raMinutes: '', raSeconds: '',
      decDegrees: '', decMinutes: '', decSeconds: '', decSign: '+'
    });
  };

  const removeObservation = (id) => {
    setObservations(observations.filter(obs => obs.id !== id));
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
  const handleCalculateOrbit = async () => {
    if (observations.length < 5) {
      alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
      return;
    }
    if (!cometName.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–µ—Ç—ã.');
      return;
    }

    setIsSubmitting(true);

    const payload = {
      name: cometName,
      observations: observations.map(obs => ({
        observation_time: obs.datetime,
        raHours: parseInt(obs.raHours), raMinutes: parseInt(obs.raMinutes), raSeconds: parseFloat(obs.raSeconds),
        decDegrees: parseInt(obs.decDegrees), decMinutes: parseInt(obs.decMinutes), decSeconds: parseFloat(obs.decSeconds),
        decSign: obs.decSign
      }))
    };

    try {
      // ‚ùóÔ∏è –í–ê–ñ–ù–û: –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –ü–û–õ–ù–´–ô URL –¢–í–û–ï–ì–û –ë–≠–ö–ï–ù–î–ê, –ï–°–õ–ò –û–ù –ù–ê –î–†–£–ì–û–ú –ü–û–†–¢–£
      // –ù–∞–ø—Ä–∏–º–µ—Ä: 'http://127.0.0.1:8000/api/comets/calculate/'
      const response = await fetch('/api/comets/calculate/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }

      onNewCometCalculated(result);
      alert(`–û—Ä–±–∏—Ç–∞ –¥–ª—è –∫–æ–º–µ—Ç—ã "${result.name}" —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞!`);

      setObservations([]);
      setCometName('');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
      alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="observation-form">
      <h3 style={{ color: '#4ecdc4', marginBottom: '2rem', textAlign: 'center', fontSize: '1.5rem' }}>
        üì° –í–≤–æ–¥ –∞—Å—Ç—Ä–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      </h3>

      <div className="form-group">
        <label>–ò–º—è –Ω–æ–≤–æ–π –∫–æ–º–µ—Ç—ã *</label>
        <input
          type="text"
          value={cometName}
          onChange={(e) => setCometName(e.target.value)}
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –ö–æ–º–µ—Ç–∞-–û—Ç–∫—Ä—ã—Ç–∏–µ"
          required
        />
      </div>

      <div className="form-row">
        <div className="form-group"><label>–î–∞—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è *</label><input type="date" value={currentObs.date} onChange={(e) => setCurrentObs({...currentObs, date: e.target.value})} required/></div>
        <div className="form-group"><label>–í—Ä–µ–º—è (UTC) *</label><input type="time" value={currentObs.time} onChange={(e) => setCurrentObs({...currentObs, time: e.target.value})} step="1" required/></div>
      </div>

      <div className="form-group">
        <label>–ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (RA) *</label>
        <div className="coord-inputs">
          <input placeholder="–ß–∞—Å—ã" value={currentObs.raHours} onChange={(e) => setCurrentObs({...currentObs, raHours: e.target.value})} type="number" min="0" max="23"/>
          <input placeholder="–ú–∏–Ω—É—Ç—ã" value={currentObs.raMinutes} onChange={(e) => setCurrentObs({...currentObs, raMinutes: e.target.value})} type="number" min="0" max="59"/>
          <input placeholder="–°–µ–∫—É–Ω–¥—ã" value={currentObs.raSeconds} onChange={(e) => setCurrentObs({...currentObs, raSeconds: e.target.value})} type="number" min="0" max="59" step="0.1"/>
        </div>
      </div>

      <div className="form-group">
        <label>–°–∫–ª–æ–Ω–µ–Ω–∏–µ (Dec) *</label>
        <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>
          <select value={currentObs.decSign} onChange={(e) => setCurrentObs({...currentObs, decSign: e.target.value})}>
            <option value="+">+</option><option value="-">-</option>
          </select>
          <input placeholder="–ì—Ä–∞–¥—É—Å—ã" value={currentObs.decDegrees} onChange={(e) => setCurrentObs({...currentObs, decDegrees: e.target.value})} type="number" min="0" max="90"/>
          <input placeholder="–ú–∏–Ω—É—Ç—ã" value={currentObs.decMinutes} onChange={(e) => setCurrentObs({...currentObs, decMinutes: e.target.value})} type="number" min="0" max="59"/>
          <input placeholder="–°–µ–∫—É–Ω–¥—ã" value={currentObs.decSeconds} onChange={(e) => setCurrentObs({...currentObs, decSeconds: e.target.value})} type="number" min="0" max="59" step="0.1"/>
        </div>
      </div>

      <button className="btn-primary" onClick={handleAddObservation}>
        <i data-feather="plus" className="btn-icon"></i> –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
      </button>

      {observations.length > 0 && (
        <div className="observations-list">
          <h4>üìã –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {observations.length}</h4>
          <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
            {observations.map(obs => (
              <div key={obs.id} className="observation-item">
                <div><strong>–í—Ä–µ–º—è:</strong> {new Date(obs.timestamp).toLocaleString('ru-RU')}</div>
                <button className="btn-danger" onClick={() => removeObservation(obs.id)}>
                  <i data-feather="trash-2" className="btn-icon"></i> –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {observations.length > 0 && (
        <div className={observations.length < 5 ? "warning-message" : "success-message"}>
          <p>
            {observations.length < 5
             ? `‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (${5 - observations.length} –æ—Å—Ç–∞–ª–æ—Å—å)`
             : `‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!`}
          </p>
        </div>
      )}

      {observations.length >= 5 && (
        <div style={{marginTop: '2rem', textAlign: 'center'}}>
          <button className="btn-success" onClick={handleCalculateOrbit} disabled={isSubmitting}>
            {isSubmitting ? '–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º...' : `–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ä–±–∏—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`}
          </button>
        </div>
      )}
    </div>
  );
}
