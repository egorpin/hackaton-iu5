import React, { useState } from 'react';
import { calculateOrbitFromObservations } from '../utils/orbitalCalculations';

export default function ObservationForm({ onOrbitCalculated, existingObservations = [] }) {
  const [observations, setObservations] = useState(existingObservations);
  const [currentObs, setCurrentObs] = useState({
    date: '',
    time: '',
    raHours: '', raMinutes: '', raSeconds: '',
    decDegrees: '', decMinutes: '', decSeconds: '', decSign: '+',
    photo: null,
    photoPreview: null
  });

  const handlePhotoUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        setCurrentObs({
          ...currentObs,
          photo: file,
          photoPreview: e.target.result
        });
      };
      reader.readAsDataURL(file);
    }
  };

  const removePhoto = () => {
    setCurrentObs({
      ...currentObs,
      photo: null,
      photoPreview: null
    });
  };

  const handleAddObservation = () => {
    if (!currentObs.date || !currentObs.time) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (!currentObs.raHours && !currentObs.raMinutes && !currentObs.raSeconds) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ');
      return;
    }

    if (!currentObs.decDegrees && !currentObs.decMinutes && !currentObs.decSeconds) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ');
      return;
    }

    const raDecimal = (parseFloat(currentObs.raHours || 0) +
                      parseFloat(currentObs.raMinutes || 0)/60 +
                      parseFloat(currentObs.raSeconds || 0)/3600) * 15;

    const decDecimal = (parseFloat(currentObs.decDegrees || 0) +
                       parseFloat(currentObs.decMinutes || 0)/60 +
                       parseFloat(currentObs.decSeconds || 0)/3600);
    const signedDec = currentObs.decSign === '-' ? -decDecimal : decDecimal;

    const newObservation = {
      id: Date.now(),
      datetime: `${currentObs.date}T${currentObs.time}`,
      ra: raDecimal,
      dec: signedDec,
      timestamp: new Date(`${currentObs.date}T${currentObs.time}`).getTime(),
      photo: currentObs.photoPreview,
      photoName: currentObs.photo ? currentObs.photo.name : null
    };

    const updatedObservations = [...observations, newObservation];
    setObservations(updatedObservations);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–±–∏—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
    if (updatedObservations.length >= 3) {
      try {
        const orbitParams = calculateOrbitFromObservations(updatedObservations);
        onOrbitCalculated(orbitParams, updatedObservations);

        // –°–∫—Ä–æ–ª–ª –∫ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
          document.querySelector('.visualization-3d')?.scrollIntoView({
            behavior: 'smooth'
          });
        }, 500);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ—Ä–±–∏—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      }
    }

    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    setCurrentObs({
      date: '', time: '',
      raHours: '', raMinutes: '', raSeconds: '',
      decDegrees: '', decMinutes: '', decSeconds: '', decSign: '+',
      photo: null,
      photoPreview: null
    });
  };

  const removeObservation = (id) => {
    const updatedObservations = observations.filter(obs => obs.id !== id);
    setObservations(updatedObservations);

    // –ü–µ—Ä–µ—Å—á–µ—Ç –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
    if (updatedObservations.length >= 3) {
      const orbitParams = calculateOrbitFromObservations(updatedObservations);
      onOrbitCalculated(orbitParams, updatedObservations);
    } else if (updatedObservations.length < 3) {
      onOrbitCalculated(null, updatedObservations);
    }
  };

  return (
    <div className="observation-form">
      <h3 style={{ color: '#4ecdc4', marginBottom: '2rem', textAlign: 'center', fontSize: '1.5rem' }}>
        üì° –í–≤–æ–¥ –∞—Å—Ç—Ä–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      </h3>

      <div className="form-row">
        <div className="form-group">
          <label>–î–∞—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è *</label>
          <input
            type="date"
            value={currentObs.date}
            onChange={(e) => setCurrentObs({...currentObs, date: e.target.value})}
            required
          />
        </div>

        <div className="form-group">
          <label>–í—Ä–µ–º—è (UTC) *</label>
          <input
            type="time"
            value={currentObs.time}
            onChange={(e) => setCurrentObs({...currentObs, time: e.target.value})}
            step="1"
            required
          />
        </div>
      </div>

      <div className="form-group">
        <label>–ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (RA) *</label>
        <div className="coord-inputs">
          <input
            placeholder="–ß–∞—Å—ã"
            value={currentObs.raHours}
            onChange={(e) => setCurrentObs({...currentObs, raHours: e.target.value})}
            type="number"
            min="0"
            max="23"
          />
          <input
            placeholder="–ú–∏–Ω—É—Ç—ã"
            value={currentObs.raMinutes}
            onChange={(e) => setCurrentObs({...currentObs, raMinutes: e.target.value})}
            type="number"
            min="0"
            max="59"
          />
          <input
            placeholder="–°–µ–∫—É–Ω–¥—ã"
            value={currentObs.raSeconds}
            onChange={(e) => setCurrentObs({...currentObs, raSeconds: e.target.value})}
            type="number"
            min="0"
            max="59"
            step="0.1"
          />
        </div>
      </div>

      <div className="form-group">
        <label>–°–∫–ª–æ–Ω–µ–Ω–∏–µ (Dec) *</label>
        <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>
          <select
            value={currentObs.decSign}
            onChange={(e) => setCurrentObs({...currentObs, decSign: e.target.value})}
          >
            <option value="+">+</option>
            <option value="-">-</option>
          </select>
          <input
            placeholder="–ì—Ä–∞–¥—É—Å—ã"
            value={currentObs.decDegrees}
            onChange={(e) => setCurrentObs({...currentObs, decDegrees: e.target.value})}
            type="number"
            min="0"
            max="90"
          />
          <input
            placeholder="–ú–∏–Ω—É—Ç—ã"
            value={currentObs.decMinutes}
            onChange={(e) => setCurrentObs({...currentObs, decMinutes: e.target.value})}
            type="number"
            min="0"
            max="59"
          />
          <input
            placeholder="–°–µ–∫—É–Ω–¥—ã"
            value={currentObs.decSeconds}
            onChange={(e) => setCurrentObs({...currentObs, decSeconds: e.target.value})}
            type="number"
            min="0"
            max="59"
            step="0.1"
          />
        </div>
      </div>

      {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ */}
      <div className="form-group">
        <label>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∫–æ–º–µ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
        <div className="photo-upload-section">
          {!currentObs.photoPreview ? (
            <div className="photo-upload-area">
              <input
                type="file"
                id="photo-upload"
                accept="image/*"
                onChange={handlePhotoUpload}
                style={{ display: 'none' }}
              />
              <label htmlFor="photo-upload" className="photo-upload-btn">
                <i data-feather="camera" className="btn-icon"></i>
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
              </label>
              <p className="photo-upload-hint">JPG, PNG –¥–æ 5MB</p>
            </div>
          ) : (
            <div className="photo-preview">
              <div className="photo-preview-image">
                <img src={currentObs.photoPreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" />
                <button
                  type="button"
                  className="photo-remove-btn"
                  onClick={removePhoto}
                >
                  <i data-feather="x"></i>
                </button>
              </div>
              <p className="photo-name">{currentObs.photo?.name}</p>
            </div>
          )}
        </div>
      </div>

      <button className="btn-primary" onClick={handleAddObservation}>
        <i data-feather="plus" className="btn-icon"></i>
        –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
      </button>

      {observations.length > 0 && (
        <div className="observations-list">
          <h4 style={{ color: '#ffd700', marginBottom: '1rem', textAlign: 'center' }}>
            üìã –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {observations.length}
          </h4>
          <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
            {observations.map(obs => (
              <div key={obs.id} className="observation-item">
                <div className="observation-header">
                  <div>
                    <strong>–í—Ä–µ–º—è:</strong> {new Date(obs.timestamp).toLocaleString('ru-RU')}
                  </div>
                  {obs.photo && (
                    <span className="photo-badge">
                      <i data-feather="image"></i> –§–æ—Ç–æ
                    </span>
                  )}
                </div>
                <div>
                  <strong>RA:</strong> {obs.ra.toFixed(4)}¬∞ | <strong>Dec:</strong> {obs.dec.toFixed(4)}¬∞
                </div>
                {obs.photo && (
                  <div className="observation-photo">
                    <img src={obs.photo} alt="–§–æ—Ç–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è" />
                  </div>
                )}
                <button
                  className="btn-danger"
                  onClick={() => removeObservation(obs.id)}
                >
                  <i data-feather="trash-2" className="btn-icon"></i>
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {observations.length < 3 && observations.length > 0 && (
        <div className="warning-message">
          <p>
            ‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Ä–±–∏—Ç—ã ({3 - observations.length} –æ—Å—Ç–∞–ª–æ—Å—å)
          </p>
        </div>
      )}
    </div>
  );
}
