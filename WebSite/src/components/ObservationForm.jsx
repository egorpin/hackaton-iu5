// --- START OF FILE ObservationForm.jsx ---

import React, { useState, useEffect, useRef } from 'react';
import { addObservationToComet, createComet, deleteComet, updateComet } from '../api';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–æ–º–µ—Ç–æ–π –≤ —Å–ø–∏—Å–∫–µ
function CometItem({ comet, isSelected, onSelect, onUpdateName, onRemove, onToggleExpand }) {
  const [name, setName] = useState(comet.name);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ –ø—Ä–æ–ø—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
  useEffect(() => {
    setName(comet.name);
  }, [comet.name]);

  const handleNameChange = (e) => setName(e.target.value);

  const handleNameBlur = () => {
    if (name.trim() && name !== comet.name) {
      onUpdateName(comet.id, { name });
    } else {
      setName(comet.name); // –°–±—Ä–æ—Å, –µ—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    }
  };

  return (
    <div className={`comet-item ${isSelected ? 'active' : ''}`}>
      <div className="comet-header">
        <div className="comet-info">
          <input type="text" value={name} onChange={handleNameChange} onBlur={handleNameBlur} className="comet-name-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–µ—Ç—ã" />
          <span className="comet-stats">{comet.observations.length} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π</span>
        </div>
        <div className="comet-actions">
          <button className="comet-toggle-btn" onClick={() => onToggleExpand(comet.id)}><i data-feather={comet.isExpanded ? "chevron-up" : "chevron-down"}></i></button>
          <button className={`comet-select-btn ${isSelected ? 'active' : ''}`} onClick={() => onSelect(comet.id)}><i data-feather="target"></i></button>
          {/* –†–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–º–µ—Ç–∞ –æ–¥–Ω–∞ */}
          <button className="comet-remove-btn" onClick={() => onRemove(comet.id)}><i data-feather="trash-2"></i></button>
        </div>
      </div>
      {comet.isExpanded && (
        <div className="comet-observations">
          {comet.observations.length === 0 ? (
            <div className="no-observations">–ù–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–æ–º–µ—Ç—ã</div>
          ) : (
            comet.observations.map(obs => (
              <div key={obs.id} className="observation-mini">
                <span>{new Date(obs.observation_time).toLocaleDateString('ru-RU')}</span>
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä
export default function ObservationForm({ comets, onUpdate, selectedCometId, setSelectedCometId }) {
  const [currentObs, setCurrentObs] = useState({ 
    date: '', 
    time: '', 
    ra: '', 
    dec: '',
    photo: null,
    photoPreview: null
  });
  const [newCometName, setNewCometName] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [expandedComets, setExpandedComets] = useState({});
  
  const fileInputRef = useRef(null);

  useEffect(() => {
    if (window.feather) window.feather.replace();
  }, [comets, expandedComets, currentObs.photoPreview]);

  const selectedComet = comets.find(c => c.id === selectedCometId);

  const handlePhotoUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        setCurrentObs({
          ...currentObs,
          photo: file,
          photoPreview: e.target.result
        });
        setError('');
      };
      reader.readAsDataURL(file);
    }
  };

  const removePhoto = () => {
    setCurrentObs({
      ...currentObs,
      photo: null,
      photoPreview: null
    });
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleAddNewComet = async (e) => {
    e.preventDefault();
    if (!newCometName.trim()) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–µ—Ç—ã.");
      return;
    }
    setError('');
    try {
      const newComet = await createComet({ name: newCometName });
      onUpdate('add', newComet);
      setSelectedCometId(newComet.id);
      setNewCometName(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    } catch (err) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–µ—Ç—É.");
    }
  };

  const handleRemoveComet = async (cometId) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–µ—Ç—É "${comets.find(c => c.id === cometId)?.name}"?`)) {
      try {
        await deleteComet(cometId);
        onUpdate('delete', cometId);
      } catch (err) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–µ—Ç—É.");
      }
    }
  };

  const handleUpdateCometName = async (cometId, data) => {
    try {
      const updatedComet = await updateComet(cometId, data);
      onUpdate('update', updatedComet);
    } catch (err) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –∫–æ–º–µ—Ç—ã.");
    }
  };

  const handleAddObservation = async (e) => {
    e.preventDefault();
    if (!selectedCometId || !currentObs.date || !currentObs.time || !currentObs.ra || !currentObs.dec) {
      setError("–í—Å–µ –ø–æ–ª—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, RA, Dec) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.");
      return;
    }

    const ra_hms_str = currentObs.ra.trim().replace(/\s+/g, ':');
    const dec_dms_str = currentObs.dec.trim().replace(/\s+/g, ':');

    const observationData = { 
      observation_time: `${currentObs.date}T${currentObs.time}`, 
      ra_hms_str, 
      dec_dms_str 
    };

    setIsLoading(true);
    setError('');
    try {
      const updatedComet = await addObservationToComet(selectedCometId, observationData);
      onUpdate('update', updatedComet);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ
      setCurrentObs({ 
        date: '', 
        time: '', 
        ra: '', 
        dec: '',
        photo: null,
        photoPreview: null
      });
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } catch (err) {
      const errorMessages = Object.entries(err).map(([key, value]) => `${key}: ${Array.isArray(value) ? value.join(', ') : value}`).join(' ');
      setError(errorMessages || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.");
    } finally {
      setIsLoading(false);
    }
  };

  const toggleCometExpanded = (cometId) => {
    setExpandedComets(prev => ({ ...prev, [cometId]: !prev[cometId] }));
  };

  return (
    <div className="observation-form">
      <h3 style={{ color: '#4ecdc4', marginBottom: '2rem', textAlign: 'center', fontSize: '1.5rem' }}>üì° –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–µ—Ç</h3>

      {/* --- –ë–õ–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ö–û–ú–ï–¢–´ --- */}
      <div className="comets-panel" style={{marginBottom: '2rem'}}>
        <form className="comets-header" onSubmit={handleAddNewComet}>
            <input
              type="text"
              className="comet-name-input"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –∫–æ–º–µ—Ç—ã"
              value={newCometName}
              onChange={(e) => setNewCometName(e.target.value)}
              style={{flexGrow: 1}}
            />
            <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'center', flexWrap: 'wrap', marginTop: '0.5rem' }}>
              <button type="submit" className="btn btn-outline btn-small">
                <i data-feather="plus-circle" className="btn-icon"></i>
                –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–µ—Ç—É
              </button>
            </div>
        </form>
      </div>

      <div className="comets-panel">
        <div className="comets-list">
          {comets.map(comet => (
            <CometItem key={comet.id} comet={{...comet, isExpanded: !!expandedComets[comet.id]}} isSelected={selectedCometId === comet.id} onSelect={setSelectedCometId} onUpdateName={handleUpdateCometName} onRemove={handleRemoveComet} onToggleExpand={toggleCometExpanded} />
          ))}
        </div>
      </div>

      <form className="observation-input-section" onSubmit={handleAddObservation}>
        <div className="current-comet-info"><h4>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –¥–ª—è: <span className="comet-name">{selectedComet?.name || '...'}</span></h4></div>
        <div className="form-row">
          <div className="form-group"><label>–î–∞—Ç–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è *</label><input type="date" value={currentObs.date} onChange={(e) => setCurrentObs({...currentObs, date: e.target.value})} required/></div>
          <div className="form-group"><label>–í—Ä–µ–º—è (UTC) *</label><input type="time" step="1" value={currentObs.time} onChange={(e) => setCurrentObs({...currentObs, time: e.target.value})} required/></div>
        </div>
        <div className="form-row">
          <div className="form-group"><label>–ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (RA) *</label><input type="text" placeholder="–ß–ß –ú–ú –°–°.–°" value={currentObs.ra} onChange={(e) => setCurrentObs({...currentObs, ra: e.target.value})} required/><div className="coord-example">–ü—Ä–∏–º–µ—Ä: 12 34 56.7</div></div>
          <div className="form-group"><label>–°–∫–ª–æ–Ω–µ–Ω–∏–µ (Dec) *</label><input type="text" placeholder="[+/-]–î–î –ú–ú –°–°.–°" value={currentObs.dec} onChange={(e) => setCurrentObs({...currentObs, dec: e.target.value})} required/><div className="coord-example">–ü—Ä–∏–º–µ—Ä: +45 30 15.2</div></div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ */}
        <div className="form-group">
          <label>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∫–æ–º–µ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
          <div className="photo-upload-section">
            {!currentObs.photoPreview ? (
              <div
                className="photo-upload-area"
                onClick={() => fileInputRef.current?.click()}
              >
                <input
                  ref={fileInputRef}
                  type="file"
                  id="photo-upload"
                  accept="image/*"
                  onChange={handlePhotoUpload}
                  style={{ display: 'none' }}
                />
                <div className="photo-upload-content">
                  <i data-feather="upload" className="photo-upload-icon"></i>
                  <div className="photo-upload-text">
                    <div className="photo-upload-title">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ</div>
                    <div className="photo-upload-subtitle">–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –æ–±–ª–∞—Å—Ç–∏</div>
                  </div>
                  <p className="photo-upload-hint">JPG, PNG –¥–æ 5MB</p>
                </div>
              </div>
            ) : (
              <div className="photo-preview">
                <div className="photo-preview-image">
                  <img src={currentObs.photoPreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" />
                  <button
                    type="button"
                    className="photo-remove-btn"
                    onClick={removePhoto}
                  >
                    <i data-feather="x"></i>
                  </button>
                </div>
                <p className="photo-name">{currentObs.photo?.name}</p>
              </div>
            )}
          </div>
        </div>

        {error && <div className="error-message" style={{color: 'red', textAlign: 'center', margin: '1rem 0'}}>{error}</div>}
        <button type="submit" className="btn btn-outline" disabled={isLoading || !selectedCometId}>
          {isLoading ? "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ..." : `–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–ª—è ${selectedComet?.name || ''}`}
        </button>
      </form>
    </div>
  );
}
// --- END OF FILE ObservationForm.jsx ---