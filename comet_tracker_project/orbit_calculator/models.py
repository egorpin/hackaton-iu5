from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
import astropy.units as u
from astropy.coordinates import Angle, SkyCoord

class Comet(models.Model):
    """–ú–æ–¥–µ–ª—å –∫–æ–º–µ—Ç—ã (–∏–ª–∏ —Å–µ—Ä–∏–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π)."""
    name = models.CharField(max_length=100, default='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–µ—Ç–∞')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

class Observation(models.Model):
    comet = models.ForeignKey(Comet, on_delete=models.CASCADE, related_name='observations')
    observation_time = models.DateTimeField(
        help_text="–í—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (UTC)"
    )

    # üí° –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
    ra_deg = models.FloatField(
        validators=[MinValueValidator(0.0), MaxValueValidator(360.0)],
        help_text="–ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (RA) –≤ –≥—Ä–∞–¥—É—Å–∞—Ö"
    )
    dec_deg = models.FloatField(
        validators=[MinValueValidator(-90.0), MaxValueValidator(90.0)],
        help_text="–°–∫–ª–æ–Ω–µ–Ω–∏–µ (Dec) –≤ –≥—Ä–∞–¥—É—Å–∞—Ö"
    )

    photo = models.ImageField(
        upload_to='comet_photos/',
        null=True,
        blank=True
    )

    def __str__(self):
        return f"–ù–∞–±–ª—é–¥–µ–Ω–∏–µ {self.id} –¥–ª—è {self.comet.name} @ {self.observation_time}"

    # ==========================================================
    # üí° –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç H/M/S –∏ D/M/S
    # ==========================================================

    @property
    def ra_hms_parts(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç–∏ RA (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã) –∏–∑ ra_deg."""
        hms = Angle(self.ra_deg * u.deg).to_string(unit=u.hour, sep=('h', 'm', 's')).split()
        return {
            'raHours': int(hms[0][:-1]),
            'raMinutes': int(hms[1][:-1]),
            'raSeconds': float(hms[2][:-1])
        }

    @property
    def dec_dms_parts(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç–∏ Dec (–∑–Ω–∞–∫, –≥—Ä–∞–¥—É—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã) –∏–∑ dec_deg."""
        dms_str = Angle(self.dec_deg * u.deg).to_string(unit=u.deg, sep=('d', 'm', 's'), precision=1)
        sign = '+' if self.dec_deg >= 0 else '-'

        # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        dms_parts = dms_str.replace('+', '').replace('-', '').split()

        return {
            'decSign': sign,
            'decDegrees': int(dms_parts[0][:-1]),
            'decMinutes': int(dms_parts[1][:-1]),
            'decSeconds': float(dms_parts[2][:-1])
        }

    # üí° –ü–æ–ª–µ–∑–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Astropy SkyCoord
    def to_skycoord(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç SkyCoord –∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π."""
        return SkyCoord(
            ra=self.ra_deg * u.deg,
            dec=self.dec_deg * u.deg,
            frame='icrs'
        )

class OrbitalElements(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ä–±–∏—Ç—ã –∫–æ–º–µ—Ç—ã."""
    comet = models.OneToOneField(Comet, on_delete=models.CASCADE, related_name='elements')

    # 6 –ö–µ–ø–ª–µ—Ä–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    # 1. –ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å (a)
    semimajor_axis = models.FloatField(
        help_text="–ë–æ–ª—å—à–∞—è –ø–æ–ª—É–æ—Å—å (–∞.–µ.)"
    )
    # 2. –≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç (e)
    eccentricity = models.FloatField(
        validators=[MinValueValidator(0.0)],
        help_text="–≠–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç (e)"
    )
    # 3. –ù–∞–∫–ª–æ–Ω–µ–Ω–∏–µ (i)
    inclination = models.FloatField(
        help_text="–ù–∞–∫–ª–æ–Ω–µ–Ω–∏–µ (–≥—Ä–∞–¥)"
    )
    # 4. –î–æ–ª–≥–æ—Ç–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —É–∑–ª–∞ (Œ©)
    ra_of_node = models.FloatField(
        help_text="–î–æ–ª–≥–æ—Ç–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —É–∑–ª–∞ (–≥—Ä–∞–¥)"
    )
    # 5. –ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–∏—Ü–µ–Ω—Ç—Ä–∞ (œâ)
    arg_of_pericenter = models.FloatField(
        help_text="–ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–∏—Ü–µ–Ω—Ç—Ä–∞ (–≥—Ä–∞–¥)"
    )
    # 6. –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–∏–≥–µ–ª–∏—è (T0)
    time_of_pericenter = models.DateTimeField(
        help_text="–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–∏–≥–µ–ª–∏—è (T0)"
    )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
    calculation_date = models.DateTimeField(auto_now=True)
    rms_error = models.FloatField(
        null=True,
        blank=True,
        help_text="–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ–Ω–∫–∏"
    )

    def __str__(self):
        return f"–û—Ä–±–∏—Ç–∞ {self.comet.name} ({self.calculation_date.date()})"

class CloseApproach(models.Model):
    """
    –ü—Ä–æ–≥–Ω–æ–∑ —Å–±–ª–∏–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OneToOneField,
    –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è, —á—Ç–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ä–±–∏—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑.
    """
    # ‚ùóÔ∏è –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º OneToOneField –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏
    elements = models.OneToOneField(
        OrbitalElements,
        on_delete=models.CASCADE,
        related_name='approach_prediction'
    )

    approach_date = models.DateTimeField(
        help_text="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–±–ª–∏–∂–µ–Ω–∏—è"
    )
    min_distance_au = models.FloatField(
        help_text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ó–µ–º–ª–∏ –≤ –∞.–µ."
    )

    def __str__(self):
        return f"–°–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ä–±–∏—Ç—ã {self.elements.id} ({self.approach_date.date()})"
