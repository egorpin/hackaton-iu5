# orbit_calculator/serializers.py

from .models import Comet, Observation, OrbitalElements, CloseApproach
from rest_framework import serializers
from astropy.coordinates import Angle
import astropy.units as u
# --- –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã (–¥–ª—è —á—Ç–µ–Ω–∏—è) ---

class OrbitalElementsSerializer(serializers.ModelSerializer):
    class Meta:
        model = OrbitalElements
        fields = '__all__' # –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

class CloseApproachSerializer(serializers.ModelSerializer):
    class Meta:
        model = CloseApproach
        fields = '__all__' # –î–∞—Ç–∞ –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è —Å–±–ª–∏–∂–µ–Ω–∏—è

class ObservationSerializer(serializers.ModelSerializer):
    # üí° –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ (–Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î)
    raHours = serializers.IntegerField(write_only=True, min_value=0, max_value=24, required=False)
    raMinutes = serializers.IntegerField(write_only=True, min_value=0, max_value=60, required=False)
    raSeconds = serializers.FloatField(write_only=True, min_value=0.0, max_value=60.0, required=False)

    decDegrees = serializers.IntegerField(write_only=True, min_value=0, max_value=90, required=False)
    decMinutes = serializers.IntegerField(write_only=True, min_value=0, max_value=60, required=False)
    decSeconds = serializers.FloatField(write_only=True, min_value=0.0, max_value=60.0, required=False)
    decSign = serializers.CharField(write_only=True, max_length=1, required=False) # '+' –∏–ª–∏ '-'

    class Meta:
        model = Observation
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —á—Ç–µ–Ω–∏—è
        fields = (
            'id', 'observation_time', 'photo',
            'ra_deg', 'dec_deg', # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —á—Ç–µ–Ω–∏—è
            'raHours', 'raMinutes', 'raSeconds',
            'decDegrees', 'decMinutes', 'decSeconds', 'decSign' # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏
        )
        read_only_fields = ('id', 'ra_deg', 'dec_deg')
        exclude = ('comet',) # 'comet' —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤–æ View

    def validate(self, data):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º H/M/S –∏ D/M/S –≤ –≥—Ä–∞–¥—É—Å—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""

        # 1. RA: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Hours/Minutes/Seconds –≤ –≥—Ä–∞–¥—É—Å—ã (ra_deg)
        if all(k in data for k in ['raHours', 'raMinutes', 'raSeconds']):
            ra_str = f"{data['raHours']}h{data['raMinutes']}m{data['raSeconds']}s"
            try:
                ra_angle = Angle(ra_str)
                data['ra_deg'] = ra_angle.deg
            except Exception:
                raise serializers.ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ü—Ä—è–º–æ–≥–æ –í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—è (RA).")

        # 2. DEC: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Degrees/Minutes/Seconds –≤ –≥—Ä–∞–¥—É—Å—ã (dec_deg)
        if all(k in data for k in ['decDegrees', 'decMinutes', 'decSeconds', 'decSign']):
            dec_str = f"{data['decSign']}{data['decDegrees']}d{data['decMinutes']}m{data['decSeconds']}s"
            try:
                dec_angle = Angle(dec_str)
                data['dec_deg'] = dec_angle.deg
            except Exception:
                raise serializers.ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –°–∫–ª–æ–Ω–µ–Ω–∏—è (Dec).")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ra_deg –∏ dec_deg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–ª–∏–±–æ —á–µ—Ä–µ–∑ H/M/S, –ª–∏–±–æ —É–∂–µ –µ—Å—Ç—å)
        if 'ra_deg' not in data or 'dec_deg' not in data:
             raise serializers.ValidationError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")

        return data

    def create(self, validated_data):
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è H/M/S –∏ D/M/S –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
        for k in ['raHours', 'raMinutes', 'raSeconds', 'decDegrees', 'decMinutes', 'decSeconds', 'decSign']:
            validated_data.pop(k, None)

        return super().create(validated_data)

    def update(self, instance, validated_data):
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è H/M/S –∏ D/M/S –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        for k in ['raHours', 'raMinutes', 'raSeconds', 'decDegrees', 'decMinutes', 'decSeconds', 'decSign']:
            validated_data.pop(k, None)

        return super().update(instance, validated_data)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã ---

class CometDetailSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–µ—Ç—ã (GET /comets/<id>/)"""
    observations = ObservationSerializer(many=True, read_only=True)

    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑
    elements = OrbitalElementsSerializer(read_only=True)
    close_approach = serializers.SerializerMethodField()

    class Meta:
        model = Comet
        fields = ('id', 'name', 'created_at', 'observations', 'elements', 'close_approach')

    def get_close_approach(self, obj):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–±–ª–∏–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –∫–∞–∂–¥–æ–π –æ—Ä–±–∏—Ç—ã –µ—Å—Ç—å –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑ —Å–±–ª–∏–∂–µ–Ω–∏—è
            return CloseApproachSerializer(obj.elements.approaches.latest('id')).data
        except CloseApproach.DoesNotExist:
            return None

# --- –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ (POST) ---

class CometCreateSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–µ—Ç—ã –∏ –µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (POST /calculate/)"""
    # –≠—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    observations = ObservationSerializer(many=True)

    class Meta:
        model = Comet
        fields = ('name', 'observations')

    def create(self, validated_data):
        observations_data = validated_data.pop('observations')
        comet = Comet.objects.create(**validated_data)
        for obs_data in observations_data:
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–µ—Ç–µ
            Observation.objects.create(comet=comet, **obs_data)
        return comet
